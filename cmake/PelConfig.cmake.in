###############################################################################
# Config File for  Pose Estimation Library
#
# This sets the following variables:
# Pel_INCLUDE_DIRS - directory of include files.
# Pel_LIBRARIES - libraries to link against.
# Pel_LIBRARY_DIRS - directory of libraries.
# Pel_DEFINITIONS - Preprocessor definitions for compiler

find_package(PkgConfig QUIET)
file(TO_CMAKE_PATH "${Pel_DIR}" Pel_DIR)
#Compute paths
get_filename_component(Pel_ROOT "${Pel_DIR}" PATH)
get_filename_component(Pel_ROOT "${Pel_ROOT}" PATH)

if (EXISTS "${Pel_ROOT}/include/@PEL_NAME@-${PEL_VERSION_MAJOR}.${PEL_VERSION_MINOR}/pel/pel_config.h")
  #Found a PEL installation
  set(Pel_INCLUDE_DIRS "${Pel_ROOT}/include/@PEL_NAME@-${PEL_VERSION_MAJOR}.${PEL_VERSION_MINOR}")
  set(Pel_LIBRARY_DIRS "${Pel_ROOT}/@PEL_LIB_INSTALL_DIR@")
  find_library(PEL_LIB @PEL_NAME@ HINTS ${Pel_LIBRARY_DIRS}
    DOC "Pose Estimation Library" NO_DEFAULT_PATH)
  set(Pel_LIBRARIES "${PEL_LIB}")
  set(Pel_DEFINITIONS "-std=c++11")
elseif(EXISTS "${Pel_DIR}/include/pel/pel_config.h")
  #Found PEL into build tree
  set(Pel_INCLUDE_DIRS "${Pel_DIR}/include")
  set(Pel_LIBRARY_DIRS "${Pel_DIR}/@PEL_LIB_INSTALL_DIR@")
  set(PEL_SOURCE_TREE "@PEL_SOURCE_DIR@")
  list(APPEND Pel_INCLUDE_DIRS "${PEL_SOURCE_TREE}/include")
  find_library(PEL_LIB @PEL_NAME@ HINTS ${Pel_LIBRARY_DIRS}
    DOC "Pose Estimation Library" NO_DEFAULT_PATH)
  set(Pel_LIBRARIES "${PEL_LIB}")
  set(Pel_DEFINITIONS "-std=c++11")
else(EXISTS "${Pel_ROOT}/include/@PEL_NAME@-${PEL_VERSION_MAJOR}.${PEL_VERSION_MINOR}/pel/pel_config.h")
  #Not found ...
  unset(Pel_INCLUDE_DIRS)
  unset(Pel_LIBRARY_DIRS)
  unset(Pel_LIBRARIES)
  message(STATUS "Pel Not found on this system")
endif(EXISTS "${Pel_ROOT}/include/@PEL_NAME@-${PEL_VERSION_MAJOR}.${PEL_VERSION_MINOR}/pel/pel_config.h")

## Search for PCL
find_package(PCL 1.7.2 QUIET REQUIRED)
if (${PCL_FOUND})
    list(APPEND Pel_INCLUDE_DIRS ${PCL_INCLUDE_DIRS})
    list(APPEND Pel_LIBRARY_DIRS ${PCL_LIBRARY_DIRS})
    list(APPEND Pel_LIBRARIES ${PCL_LIBRARIES})
    list(APPEND Pel_DEFINITIONS ${PCL_DEFINITIONS})
endif (${PCL_FOUND})
##Search for hdf5
find_package(HDF5 QUIET REQUIRED)
if (${HDF5_FOUND})
    list(APPEND Pel_INCLUDE_DIRS ${HDF5_INCLUDE_DIRS})
    list(APPEND Pel_LIBRARY_DIRS ${HDF5_LIBRARY_DIRS})
    list(APPEND Pel_LIBRARIES ${HDF5_LIBRARIES})
    list(APPEND Pel_DEFINITIONS ${HDF5_DEFINITIONS})
endif (${HDF5_FOUND})
##Search for Boost
find_package(Boost QUIET REQUIRED)
if (${Boost_FOUND})
    list(APPEND Pel_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
    list(APPEND Pel_LIBRARY_DIRS ${Boost_LIBRARY_DIRS})
    list(APPEND Pel_LIBRARIES ${Boost_LIBRARIES})
    list(APPEND Pel_DEFINITIONS ${Boost_DEFINITIONS})
endif (${Boost_FOUND})

include(FindPackageHandleStandardArgs)

#Handles Pel_FOUND true/false if last variables are defined
find_package_handle_standard_args(@PEL_NAME@ DEFAULT_MSG Pel_INCLUDE_DIRS Pel_LIBRARY_DIRS Pel_LIBRARIES)
