###############################################################################
# Config File for  Pose Estimation Library
#
# This sets the following variables:
# pel_INCLUDE_DIRS - directory of include files.
# pel_LIBRARIES - libraries to link against.
# pel_LIBRARY_DIRS - directory of libraries.
# pel_DEFINITIONS - Preprocessor definitions for compiler

find_package(PkgConfig QUIET)
file(TO_CMAKE_PATH "${pel_DIR}" pel_DIR)
#Compute paths
get_filename_component(pel_ROOT "${pel_DIR}" PATH)
get_filename_component(pel_ROOT "${pel_ROOT}" PATH)

if (EXISTS "${pel_ROOT}/include/@pel_NAME@-${pel_VERSION_MAJOR}.${pel_VERSION_MINOR}/pel/pel_config.h")
  #Found a pel installation
  set(pel_INCLUDE_DIRS "${pel_ROOT}/include/@pel_NAME@-${pel_VERSION_MAJOR}.${pel_VERSION_MINOR}")
  set(pel_LIBRARY_DIRS "${pel_ROOT}/@pel_LIB_INSTALL_DIR@")
  find_library(pel_LIB @pel_NAME@ HINTS ${pel_LIBRARY_DIRS}
    DOC "Pose Estimation Library" NO_DEFAULT_PATH)
  set(pel_LIBRARIES "${pel_LIB}")
  set(pel_DEFINITIONS "-std=c++11")
elseif(EXISTS "${pel_DIR}/include/pel/pel_config.h")
  #Found pel into build tree
  set(pel_INCLUDE_DIRS "${pel_DIR}/include")
  set(pel_LIBRARY_DIRS "${pel_DIR}/@pel_LIB_INSTALL_DIR@")
  set(pel_SOURCE_TREE "@pel_SOURCE_DIR@")
  list(APPEND pel_INCLUDE_DIRS "${pel_SOURCE_TREE}/include")
  find_library(pel_LIB @pel_NAME@ HINTS ${pel_LIBRARY_DIRS}
    DOC "Pose Estimation Library" NO_DEFAULT_PATH)
  set(pel_LIBRARIES "${pel_LIB}")
  set(pel_DEFINITIONS "-std=c++11")
else(EXISTS "${pel_ROOT}/include/@pel_NAME@-${pel_VERSION_MAJOR}.${pel_VERSION_MINOR}/pel/pel_config.h")
  #Not found ...
  unset(pel_INCLUDE_DIRS)
  unset(pel_LIBRARY_DIRS)
  unset(pel_LIBRARIES)
  message(STATUS "pel Not found on this system")
endif(EXISTS "${pel_ROOT}/include/@pel_NAME@-${pel_VERSION_MAJOR}.${pel_VERSION_MINOR}/pel/pel_config.h")

## Search for PCL
find_package(PCL 1.7.2 QUIET REQUIRED)
if (${PCL_FOUND})
    list(APPEND pel_INCLUDE_DIRS ${PCL_INCLUDE_DIRS})
    list(APPEND pel_LIBRARY_DIRS ${PCL_LIBRARY_DIRS})
    list(APPEND pel_LIBRARIES ${PCL_LIBRARIES})
    list(APPEND pel_DEFINITIONS ${PCL_DEFINITIONS})
endif (${PCL_FOUND})
##Search for hdf5
find_package(HDF5 QUIET REQUIRED)
if (${HDF5_FOUND})
    list(APPEND pel_INCLUDE_DIRS ${HDF5_INCLUDE_DIRS})
    list(APPEND pel_LIBRARY_DIRS ${HDF5_LIBRARY_DIRS})
    list(APPEND pel_LIBRARIES ${HDF5_LIBRARIES})
    list(APPEND pel_DEFINITIONS ${HDF5_DEFINITIONS})
endif (${HDF5_FOUND})
##Search for Boost
find_package(Boost QUIET REQUIRED)
if (${Boost_FOUND})
    list(APPEND pel_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
    list(APPEND pel_LIBRARY_DIRS ${Boost_LIBRARY_DIRS})
    list(APPEND pel_LIBRARIES ${Boost_LIBRARIES})
    list(APPEND pel_DEFINITIONS ${Boost_DEFINITIONS})
endif (${Boost_FOUND})

include(FindPackageHandleStandardArgs)

#Handles pel_FOUND true/false if last variables are defined
find_package_handle_standard_args(@pel_NAME@ DEFAULT_MSG pel_INCLUDE_DIRS pel_LIBRARY_DIRS pel_LIBRARIES)
